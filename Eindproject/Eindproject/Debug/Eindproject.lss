
Eindproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c0b  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f1  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000824  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000117f0  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000395  00000000  00000000  00013aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00013e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000004c8  00000000  00000000  00013e81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 30       	cpi	r26, 0x0D	; 13
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3c d1       	rcall	.+632    	; 0x322 <main>
  aa:	63 c1       	rjmp	.+710    	; 0x372 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:
		delayms(1);
	}
}

ISR( INT0_vect )
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
	//Change interrupt for rising edge/falling edge
	if(EICRA == 0x02)
  cc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	09 f0       	breq	.+2      	; 0xd6 <__vector_1+0x28>
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__vector_1+0x116>
	{
		//On falling edge
		if(startBitFound && edges < 9)
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  de:	89 2b       	or	r24, r25
  e0:	09 f4       	brne	.+2      	; 0xe4 <__vector_1+0x36>
  e2:	6c c0       	rjmp	.+216    	; 0x1bc <__vector_1+0x10e>
  e4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <edges>
  e8:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <edges+0x1>
  ec:	29 30       	cpi	r18, 0x09	; 9
  ee:	31 05       	cpc	r19, r1
  f0:	0c f0       	brlt	.+2      	; 0xf4 <__vector_1+0x46>
  f2:	64 c0       	rjmp	.+200    	; 0x1bc <__vector_1+0x10e>
		{
			highTime = TCNT2;
  f4:	84 b5       	in	r24, 0x24	; 36
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <highTime>
 100:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <highTime+0x1>
 104:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <highTime+0x2>
 108:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <highTime+0x3>
			if(highTime > 1 && highTime < 5)
 10c:	ac 01       	movw	r20, r24
 10e:	bd 01       	movw	r22, r26
 110:	42 50       	subi	r20, 0x02	; 2
 112:	51 09       	sbc	r21, r1
 114:	61 09       	sbc	r22, r1
 116:	71 09       	sbc	r23, r1
 118:	43 30       	cpi	r20, 0x03	; 3
 11a:	51 05       	cpc	r21, r1
 11c:	61 05       	cpc	r22, r1
 11e:	71 05       	cpc	r23, r1
 120:	70 f4       	brcc	.+28     	; 0x13e <__vector_1+0x90>
			{
				if(receivedData == 0)
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <receivedData>
 126:	88 23       	and	r24, r24
 128:	19 f0       	breq	.+6      	; 0x130 <__vector_1+0x82>
				{
					//Data should be 0
				}
				else
				{
					receivedData = receivedData << 1;
 12a:	88 0f       	add	r24, r24
 12c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <receivedData>
				}
				edges++;
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <edges+0x1>
 138:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <edges>
 13c:	28 c0       	rjmp	.+80     	; 0x18e <__vector_1+0xe0>
			}
			else if(highTime > 5 && highTime < 9)
 13e:	06 97       	sbiw	r24, 0x06	; 6
 140:	a1 09       	sbc	r26, r1
 142:	b1 09       	sbc	r27, r1
 144:	03 97       	sbiw	r24, 0x03	; 3
 146:	a1 05       	cpc	r26, r1
 148:	b1 05       	cpc	r27, r1
 14a:	b0 f4       	brcc	.+44     	; 0x178 <__vector_1+0xca>
			{
				if(receivedData == 0)
 14c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <receivedData>
 150:	81 11       	cpse	r24, r1
 152:	04 c0       	rjmp	.+8      	; 0x15c <__vector_1+0xae>
				{
					receivedData = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <receivedData>
 15a:	04 c0       	rjmp	.+8      	; 0x164 <__vector_1+0xb6>
				}
				else
				{
					receivedData = receivedData << 1;
 15c:	88 0f       	add	r24, r24
					receivedData |= 1;
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <receivedData>
				}
				edges++;
 164:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <edges>
 168:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <edges+0x1>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <edges+0x1>
 172:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <edges>
 176:	0b c0       	rjmp	.+22     	; 0x18e <__vector_1+0xe0>
			}
			else
			{
				//Corrupt bit found
				receivedData = 0;
 178:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <receivedData>
				startBitFound = 0;
 17c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 180:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				edges = 0;
 184:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <edges+0x1>
 188:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <edges>
 18c:	17 c0       	rjmp	.+46     	; 0x1bc <__vector_1+0x10e>
			}
			
			if(startBitFound == 1 && edges == 8)
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 192:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	89 f4       	brne	.+34     	; 0x1bc <__vector_1+0x10e>
 19a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <edges>
 19e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <edges+0x1>
 1a2:	08 97       	sbiw	r24, 0x08	; 8
 1a4:	59 f4       	brne	.+22     	; 0x1bc <__vector_1+0x10e>
			{
				PORTE = receivedData;
 1a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <receivedData>
 1aa:	83 b9       	out	0x03, r24	; 3
				
				startBitFound = 0;
 1ac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1b0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				edges = 0;
 1b4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <edges+0x1>
 1b8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <edges>
			}
		}

		//Change interrupt mode to rising edge
		EICRA = 0x03;
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 1c2:	38 c0       	rjmp	.+112    	; 0x234 <__vector_1+0x186>
	}
	else
	{
		//On rising edge
		if(!startBitFound)
 1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1cc:	89 2b       	or	r24, r25
 1ce:	91 f4       	brne	.+36     	; 0x1f4 <__vector_1+0x146>
		{
			lowTime = TCNT2;
 1d0:	84 b5       	in	r24, 0x24	; 36
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
			if(lowTime > 6 && lowTime < 14)
 1d8:	07 97       	sbiw	r24, 0x07	; 7
 1da:	a1 09       	sbc	r26, r1
 1dc:	b1 09       	sbc	r27, r1
 1de:	07 97       	sbiw	r24, 0x07	; 7
 1e0:	a1 05       	cpc	r26, r1
 1e2:	b1 05       	cpc	r27, r1
 1e4:	e0 f4       	brcc	.+56     	; 0x21e <__vector_1+0x170>
			{
				startBitFound = 1;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1f2:	15 c0       	rjmp	.+42     	; 0x21e <__vector_1+0x170>
			}
		}
		else
		{
			lowTime = TCNT2;
 1f4:	84 b5       	in	r24, 0x24	; 36
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	a0 e0       	ldi	r26, 0x00	; 0
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
			if(lowTime < 6 || lowTime > 8)
 1fc:	06 97       	sbiw	r24, 0x06	; 6
 1fe:	a1 09       	sbc	r26, r1
 200:	b1 09       	sbc	r27, r1
 202:	03 97       	sbiw	r24, 0x03	; 3
 204:	a1 05       	cpc	r26, r1
 206:	b1 05       	cpc	r27, r1
 208:	50 f0       	brcs	.+20     	; 0x21e <__vector_1+0x170>
			{
				startBitFound = 0;
 20a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 20e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				edges = 0;
 212:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <edges+0x1>
 216:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <edges>
				receivedData = 0;
 21a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <receivedData>
			}
		}

		//Reset high timer
		highTime = 0;
 21e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <highTime>
 222:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <highTime+0x1>
 226:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <highTime+0x2>
 22a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <highTime+0x3>

		//Change interrupt mode to falling edge
		EICRA = 0x02;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	}

	
	lowTime = 0;
 234:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <lowTime>
 238:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lowTime+0x1>
 23c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lowTime+0x2>
 240:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lowTime+0x3>

	//Reset timer to 0
	TCNT2 = 0;
 244:	14 bc       	out	0x24, r1	; 36
}
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <InitInterupts>:

void InitInterupts(void)
{
	TCCR2 |= (1 << CS22);
 264:	85 b5       	in	r24, 0x25	; 37
 266:	84 60       	ori	r24, 0x04	; 4
 268:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
 26a:	14 bc       	out	0x24, r1	; 36

	EICRA |= 0x03; // EX0, EX1: rising edge
 26c:	ea e6       	ldi	r30, 0x6A	; 106
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	83 60       	ori	r24, 0x03	; 3
 274:	80 83       	st	Z, r24
	EIMSK |= 0x01; // enable intrpt EX0, EX1
 276:	89 b7       	in	r24, 0x39	; 57
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	89 bf       	out	0x39, r24	; 57
	sei();
 27c:	78 94       	sei
 27e:	08 95       	ret

00000280 <delayms>:


void delayms(int t)//delay in ms
{
	int i;
	for(i=0;i<t;i++)
 280:	18 16       	cp	r1, r24
 282:	19 06       	cpc	r1, r25
 284:	6c f4       	brge	.+26     	; 0x2a0 <delayms+0x20>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	ef ec       	ldi	r30, 0xCF	; 207
 28c:	f7 e0       	ldi	r31, 0x07	; 7
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <delayms+0xe>
 292:	00 c0       	rjmp	.+0      	; 0x294 <delayms+0x14>
 294:	00 00       	nop
 296:	2f 5f       	subi	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
 29a:	28 17       	cp	r18, r24
 29c:	39 07       	cpc	r19, r25
 29e:	a9 f7       	brne	.-22     	; 0x28a <delayms+0xa>
 2a0:	08 95       	ret

000002a2 <delayus>:


void delayus(int t)//delay in us
{
	int i;
	for(i=0;i<t;i++)
 2a2:	18 16       	cp	r1, r24
 2a4:	19 06       	cpc	r1, r25
 2a6:	5c f4       	brge	.+22     	; 0x2be <delayus+0x1c>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	42 e0       	ldi	r20, 0x02	; 2
 2ae:	4a 95       	dec	r20
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <delayus+0xc>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <delayus+0x12>
 2b4:	2f 5f       	subi	r18, 0xFF	; 255
 2b6:	3f 4f       	sbci	r19, 0xFF	; 255
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	b9 f7       	brne	.-18     	; 0x2ac <delayus+0xa>
 2be:	08 95       	ret

000002c0 <send_timon_bytes>:
	}
}

//send_timon_bytes(0b11001111);
void send_timon_bytes(unsigned char data)
{
 2c0:	df 92       	push	r13
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	d8 2f       	mov	r29, r24
	unsigned char tbit;
	int delayTime = 0;

	// make 250uS start bit first
	PORTB = 0x0;
 2d0:	18 ba       	out	0x18, r1	; 24
	delayus(100);
 2d2:	84 e6       	ldi	r24, 0x64	; 100
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	e5 df       	rcall	.-54     	; 0x2a2 <delayus>
 2d8:	c8 e0       	ldi	r28, 0x08	; 8

	// now loop and send 8 bits
	for(tbit=0; tbit<8; tbit++)
	{
		delayTime = 0;
		PORTB = 0xFF;
 2da:	1f ef       	ldi	r17, 0xFF	; 255
	//delayus(500);

	// now loop and send 8 bits
	for(tbit=0; tbit<8; tbit++)
	{
		delayTime = 0;
 2dc:	f1 2c       	mov	r15, r1
 2de:	00 e0       	ldi	r16, 0x00	; 0
		PORTB = 0xFF;
		if((data & 0b10000000))
		{
			delayTime += 100;
 2e0:	0f 2e       	mov	r0, r31
 2e2:	f4 e6       	ldi	r31, 0x64	; 100
 2e4:	df 2e       	mov	r13, r31
 2e6:	f0 2d       	mov	r31, r0
 2e8:	e1 2c       	mov	r14, r1

	// now loop and send 8 bits
	for(tbit=0; tbit<8; tbit++)
	{
		delayTime = 0;
		PORTB = 0xFF;
 2ea:	18 bb       	out	0x18, r17	; 24
		if((data & 0b10000000))
 2ec:	dd 23       	and	r29, r29
 2ee:	1c f4       	brge	.+6      	; 0x2f6 <send_timon_bytes+0x36>
		{
			delayTime += 100;
 2f0:	8d 2d       	mov	r24, r13
 2f2:	9e 2d       	mov	r25, r14
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <send_timon_bytes+0x3a>
	//delayus(500);

	// now loop and send 8 bits
	for(tbit=0; tbit<8; tbit++)
	{
		delayTime = 0;
 2f6:	8f 2d       	mov	r24, r15
 2f8:	90 2f       	mov	r25, r16
		if((data & 0b10000000))
		{
			delayTime += 100;
		}
		delayTime += 100;
		delayus(delayTime);
 2fa:	8c 59       	subi	r24, 0x9C	; 156
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	d1 df       	rcall	.-94     	; 0x2a2 <delayus>

		PORTB = 0x0;
 300:	18 ba       	out	0x18, r1	; 24
		delayus(50);
 302:	82 e3       	ldi	r24, 0x32	; 50
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	cd df       	rcall	.-102    	; 0x2a2 <delayus>


		data = data << 1;
 308:	dd 0f       	add	r29, r29
 30a:	c1 50       	subi	r28, 0x01	; 1
	
	//PORTB = 0x00;
	//delayus(500);

	// now loop and send 8 bits
	for(tbit=0; tbit<8; tbit++)
 30c:	71 f7       	brne	.-36     	; 0x2ea <send_timon_bytes+0x2a>
		delayus(50);


		data = data << 1;
	}
	PORTB = 0xFF;
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	88 bb       	out	0x18, r24	; 24
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	08 95       	ret

00000322 <main>:
void InitInterupts(void);

int main(void)
{
	/* Set all PORTB to output*/
	DDRA = 0xFF;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 326:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0;
 328:	14 ba       	out	0x14, r1	; 20
	DDRD = 0x0;
 32a:	11 ba       	out	0x11, r1	; 17
	DDRE = 0xFF;
 32c:	82 b9       	out	0x02, r24	; 2
	DDRF = 0x0;
 32e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTA = 0x0;
 332:	1b ba       	out	0x1b, r1	; 27
	PORTE = 0x0;
 334:	13 b8       	out	0x03, r1	; 3

	InitInterupts();
 336:	96 df       	rcall	.-212    	; 0x264 <InitInterupts>
 338:	0e e5       	ldi	r16, 0x5E	; 94
 33a:	11 e0       	ldi	r17, 0x01	; 1
	/*Start of infinite loop*/
	while(1)
	{
		//send_timon_bytes(0b11001101);

		if(PINF & 0b10000000)
 33c:	07 9b       	sbis	0x00, 7	; 0
 33e:	0a c0       	rjmp	.+20     	; 0x354 <main+0x32>
 340:	c0 2f       	mov	r28, r16
 342:	d1 2f       	mov	r29, r17
		{
			int k;
			for(k = 0; k < 350; k++)
			{
				send_timon_bytes(0b00000111);
 344:	87 e0       	ldi	r24, 0x07	; 7
 346:	bc df       	rcall	.-136    	; 0x2c0 <send_timon_bytes>
				delayms(1);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	99 df       	rcall	.-206    	; 0x280 <delayms>
 34e:	21 97       	sbiw	r28, 0x01	; 1
		//send_timon_bytes(0b11001101);

		if(PINF & 0b10000000)
		{
			int k;
			for(k = 0; k < 350; k++)
 350:	c9 f7       	brne	.-14     	; 0x344 <main+0x22>
 352:	0b c0       	rjmp	.+22     	; 0x36a <main+0x48>
			{
				send_timon_bytes(0b00000111);
				delayms(1);
			}
		}
		else if(PINF & 0b01000000)
 354:	06 9b       	sbis	0x00, 6	; 0
 356:	09 c0       	rjmp	.+18     	; 0x36a <main+0x48>
 358:	c0 2f       	mov	r28, r16
 35a:	d1 2f       	mov	r29, r17
		{
			int k;
			for(k = 0; k < 350; k++)
			{
				send_timon_bytes(0b11111110);
 35c:	8e ef       	ldi	r24, 0xFE	; 254
 35e:	b0 df       	rcall	.-160    	; 0x2c0 <send_timon_bytes>
				delayms(1);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	8d df       	rcall	.-230    	; 0x280 <delayms>
 366:	21 97       	sbiw	r28, 0x01	; 1
			}
		}
		else if(PINF & 0b01000000)
		{
			int k;
			for(k = 0; k < 350; k++)
 368:	c9 f7       	brne	.-14     	; 0x35c <main+0x3a>
				send_timon_bytes(0b11111110);
				delayms(1);
			}
		}

		delayms(1);
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	88 df       	rcall	.-240    	; 0x280 <delayms>
	}
 370:	e5 cf       	rjmp	.-54     	; 0x33c <main+0x1a>

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
